---
layout: post
title: Is TDD Essential?
---

h3. Episode 1

* "Is TDD Essential?":/episodes/001-is-tdd-essential.mp3

h3. Hosts

* Luther Baker
* Eric Jones
* Mark Sands

h3. Discussion

* tdd as a _driver_
* tdd illuminates patterns, SRP, Liskov Substitution
* what about higher level tests
* consider mocks and duplicity
* crossing a river analogy
* changed code and broke 290 tests with working application
* system level tests, hardware tests
* tdd teaches best practices
* some say that top talent doesn't need tdd
* writing tests first is safer than after, after requires more discipline
* subjective code quality
* check patterns
* does it make sense, is it appropriate
* common sense
* music production, balance, different songs = different balance, it depends, appropriate
* tdd becomes a metric
* tdd amortizes, levels, normalizes code to a higher, average level
* dhh pushing boundaries
* how many developers write their own code tdd
* metrics: sort files by how many commits they have each
* what are some line item values of tdd (code coverage)
* could be that tdd is a suite of practices - for enterprise environments
* list of benefits
* 100% code coverage challenge
* Lee's genetic algorithm challenge
* tdd helps you think through a problem more in depth
* concrete example where tdd enabled _less_ code
* finding your boundaries with tdd
* practice, ability to tdd may deteriorate if not used
* "enterprise fizz buzz":https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition
* patterns
* is tdd like a formal mathematical proof
* ball-n-chain, weight and inertia
* tdd line items, taught, influences, prove its merit, principles
* jigsaw analogy
* explore _bad_ ideas, ala Kent Beck
* training wheels, ala DHH

h3. References

* "TDD is dead. Long live testing.":http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html
* "Is TDD dead?":http://www.youtube.com/watch?v=z9quxZsLcfo

h4. Kent Beck

* likes the step-wise flow that tdd begats
* likes the confidence that tdd begats
* doesn't use mocks

h4. Martin Fowler

* tdd wasn't always test first
* doesn't use mocks
* current project not conducive to tdd

h4. David Heinemeier Hansson

* folks say that self tested code is a by-product
* folks say to throw out Active Record because it doesn't complete tests in 300ms
* TDD has become a big melting pot of red green refactor, mocks, design
* code should be clear, understandable

h3. Contact Information

* "twitter.com/effprog":http://www.twitter.com/effprog
* "twitter.com/theknlght":http://www.twitter.com/theknlght
* "twitter.com/marksands":http://www.twitter.com/marksands
* "Effective Programming":http://www.effectiveprogramming.com/
* "Effective Programming Podcasts":http://podcasts.effectiveprogramming.com/
